[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/black-23.1.0.dist-info/licenses/AUTHORS.html",
    "href": "envs/quarto/Lib/site-packages/black-23.1.0.dist-info/licenses/AUTHORS.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Authors\nGlued together by Łukasz Langa.\nMaintained with:\n\nCarol Willing\nCarl Meyer\nJelle Zijlstra\nMika Naylor\nZsolt Dollenstein\nCooper Lees\nRichard Si\nFelix Hildén\nBatuhan Taskaya\n\nMultiple contributions by:\n\nAbdur-Rahmaan Janhangeer\nAdam Johnson\nAdam Williamson\nAlexander Huynh\nAlexandr Artemyev\nAlex Vandiver\nAllan Simon\nAnders-Petter Ljungquist\nAmethyst Reese\nAndrew Thorp\nAndrew Zhou\nAndrey\nAndy Freeland\nAnthony Sottile\nAntonio Ossa Guerra\nArjaan Buijk\nArnav Borbornah\nArtem Malyshev\nAsger Hautop Drewsen\nAugie Fackler\nAviskar KC\nBatuhan Taşkaya\nBenjamin Wohlwend\nBenjamin Woodruff\nBharat Raghunathan\nBrandt Bucher\nBrett Cannon\nBryan Bugyi\nBryan Forbes\nCalum Lind\nCharles\nCharles Reid\nChristian Clauss\nChristian Heimes\nChuck Wooters\nChris Rose\nCodey Oxley\nCong\nCooper Ry Lees\nDan Davison\nDaniel Hahler\nDaniel M. Capella\nDaniele Esposti\nDavid Hotham\nDavid Lukes\nDavid Szotten\nDenis Laxalde\nDouglas Thor\ndylanjblack\nEli Treuherz\nEmil Hessman\nFelix Kohlgrüber\nFlorent Thiery\nFrancisco\nGiacomo Tagliabue\nGreg Gandenberger\nGregory P. Smith\nGustavo Camargo\nhauntsaninja\nHadi Alqattan\nHassan Abouelela\nHeaford\nHugo Barrera\nHugo van Kemenade\nHynek Schlawack\nIonite\nIvan Katanić\nJakub Kadlubiec\nJakub Warczarek\nJan Hnátek\nJason Fried\nJason Friedland\njgirardet\nJim Brännlund\nJimmy Jia\nJoe Antonakakis\nJon Dufresne\nJonas Obrist\nJonty Wareing\nJose Nazario\nJoseph Larson\nJosh Bode\nJosh Holland\nJoshua Cannon\nJosé Padilla\nJuan Luis Cano Rodríguez\nkaiix\nKatie McLaughlin\nKatrin Leinweber\nKeith Smiley\nKenyon Ralph\nKevin Kirsche\nKyle Hausmann\nKyle Sunden\nLawrence Chan\nLinus Groh\nLoren Carvalho\nLuka Sterbic\nLukasDrude\nMahmoud Hossam\nMariatta\nMatt VanEseltine\nMatthew Clapp\nMatthew Walster\nMax Smolens\nMichael Aquilina\nMichael Flaxman\nMichael J. Sullivan\nMichael McClimon\nMiguel Gaiowski\nMike\nmikehoyio\nMin ho Kim\nMiroslav Shubernetskiy\nMomIsBestFriend\nNathan Goldbaum\nNathan Hunt\nNeraste\nNikolaus Waxweiler\nOfek Lev\nOsaetin Daniel\notstrel\nPablo Galindo\nPaul Ganssle\nPaul Meinhardt\nPeter Bengtsson\nPeter Grayson\nPeter Stensmyr\npmacosta\nQuentin Pradet\nRalf Schmitt\nRamón Valles\nRichard Fearn\nRishikesh Jha\nRupert Bedford\nRussell Davis\nSagi Shadur\nRémi Verschelde\nSami Salonen\nSamuel Cormier-Iijima\nSanket Dasgupta\nSergi\nScott Stevenson\nShantanu\nshaoran\nShinya Fujino\nspringstan\nStavros Korokithakis\nStephen Rosen\nSteven M. Vascellaro\nSunil Kapil\nSébastien Eustace\nTal Amuyal\nTerrance\nThom Lu\nThomas Grainger\nTim Gates\nTim Swast\nTimo\nToby Fleming\nTom Christie\nTony Narlock\nTsuyoshi Hombashi\nTushar Chandra\nTzu-ping Chung\nUtsav Shah\nutsav-dbx\nvezeli\nVille Skyttä\nVishwas B Sharma\nVlad Emelianov\nwilliamfzc\nwouter bolsterlee\nYazdan\nYngve Høiseth\nYurii Karabas\nZac Hatfield-Dodds"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/idna-3.4.dist-info/LICENSE.html",
    "href": "envs/quarto/Lib/site-packages/idna-3.4.dist-info/LICENSE.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2013-2021, Kim Davies All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/jupyter_events-0.6.3.dist-info/licenses/COPYING.html",
    "href": "envs/quarto/Lib/site-packages/jupyter_events-0.6.3.dist-info/licenses/COPYING.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2022-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "href": "envs/quarto/Lib/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "from imp import reload"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-for-nbagg-backend.",
    "href": "envs/quarto/Lib/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-for-nbagg-backend.",
    "title": "Ethan Orlowsky",
    "section": "UAT for NbAgg backend.",
    "text": "UAT for NbAgg backend.\nThe first line simply reloads matplotlib, uses the nbagg backend and then reloads the backend, just to ensure we have the latest modification to the backend code. Note: The underlying JavaScript will not be updated by this process, so a refresh of the browser after clearing the output and saving is necessary to clear everything fully.\n\nimport matplotlib\nreload(matplotlib)\n\nmatplotlib.use('nbagg')\n\nimport matplotlib.backends.backend_nbagg\nreload(matplotlib.backends.backend_nbagg)\n\n\nUAT 1 - Simple figure creation using pyplot\nShould produce a figure window which is interactive with the pan and zoom buttons. (Do not press the close button, but any others may be used).\n\nimport matplotlib.backends.backend_webagg_core\nreload(matplotlib.backends.backend_webagg_core)\n\nimport matplotlib.pyplot as plt\nplt.interactive(False)\n\nfig1 = plt.figure()\nplt.plot(range(10))\n\nplt.show()\n\n\n\nUAT 2 - Creation of another figure, without the need to do plt.figure.\nAs above, a new figure should be created.\n\nplt.plot([3, 2, 1])\nplt.show()\n\n\n\nUAT 3 - Connection info\nThe printout should show that there are two figures which have active CommSockets, and no figures pending show.\n\nprint(matplotlib.backends.backend_nbagg.connection_info())\n\n\n\nUAT 4 - Closing figures\nClosing a specific figure instance should turn the figure into a plain image - the UI should have been removed. In this case, scroll back to the first figure and assert this is the case.\n\nplt.close(fig1)\nplt.close('all')\n\n\n\nUAT 5 - No show without plt.show in non-interactive mode\nSimply doing a plt.plot should not show a new figure, nor indeed update an existing one (easily verified in UAT 6). The output should simply be a list of Line2D instances.\n\nplt.plot(range(10))\n\n\n\nUAT 6 - Connection information\nWe just created a new figure, but didn’t show it. Connection info should no longer have “Figure 1” (as we closed it in UAT 4) and should have figure 2 and 3, with Figure 3 without any connections. There should be 1 figure pending.\n\nprint(matplotlib.backends.backend_nbagg.connection_info())\n\n\n\nUAT 7 - Show of previously created figure\nWe should be able to show a figure we’ve previously created. The following should produce two figure windows.\n\nplt.show()\nplt.figure()\nplt.plot(range(5))\nplt.show()\n\n\n\nUAT 8 - Interactive mode\nIn interactive mode, creating a line should result in a figure being shown.\n\nplt.interactive(True)\nplt.figure()\nplt.plot([3, 2, 1])\n\nSubsequent lines should be added to the existing figure, rather than creating a new one.\n\nplt.plot(range(3))\n\nCalling connection_info in interactive mode should not show any pending figures.\n\nprint(matplotlib.backends.backend_nbagg.connection_info())\n\nDisable interactive mode again.\n\nplt.interactive(False)\n\n\n\nUAT 9 - Multiple shows\nUnlike most of the other matplotlib backends, we may want to see a figure multiple times (with or without synchronisation between the views, though the former is not yet implemented). Assert that plt.gcf().canvas.manager.reshow() results in another figure window which is synchronised upon pan & zoom.\n\nplt.gcf().canvas.manager.reshow()\n\n\n\nUAT 10 - Saving notebook\nSaving the notebook (with CTRL+S or File->Save) should result in the saved notebook having static versions of the figures embedded within. The image should be the last update from user interaction and interactive plotting. (check by converting with ipython nbconvert <notebook>)\n\n\nUAT 11 - Creation of a new figure on second show\nCreate a figure, show it, then create a new axes and show it. The result should be a new figure.\nBUG: Sometimes this doesn’t work - not sure why (@pelson).\n\nfig = plt.figure()\nplt.axes()\nplt.show()\n\nplt.plot([1, 2, 3])\nplt.show()\n\n\n\nUAT 12 - OO interface\nShould produce a new figure and plot it.\n\nfrom matplotlib.backends.backend_nbagg import new_figure_manager,show\n\nmanager = new_figure_manager(1000)\nfig = manager.canvas.figure\nax = fig.add_subplot(1,1,1)\nax.plot([1,2,3])\nfig.show()"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "href": "envs/quarto/Lib/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "title": "Ethan Orlowsky",
    "section": "UAT 13 - Animation",
    "text": "UAT 13 - Animation\nThe following should generate an animated line:\n\nimport matplotlib.animation as animation\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nx = np.arange(0, 2*np.pi, 0.01)        # x-array\nline, = ax.plot(x, np.sin(x))\n\ndef animate(i):\n    line.set_ydata(np.sin(x+i/10.0))  # update the data\n    return line,\n\n#Init only required for blitting to give a clean slate.\ndef init():\n    line.set_ydata(np.ma.array(x, mask=True))\n    return line,\n\nani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,\n                              interval=100., blit=True)\nplt.show()\n\n\nUAT 14 - Keyboard shortcuts in IPython after close of figure\nAfter closing the previous figure (with the close button above the figure) the IPython keyboard shortcuts should still function.\n\n\nUAT 15 - Figure face colours\nThe nbagg honours all colours apart from that of the figure.patch. The two plots below should produce a figure with a red background. There should be no yellow figure.\n\nimport matplotlib\nmatplotlib.rcParams.update({'figure.facecolor': 'red',\n                            'savefig.facecolor': 'yellow'})\nplt.figure()\nplt.plot([3, 2, 1])\n\nplt.show()\n\n\n\nUAT 16 - Events\nPressing any keyboard key or mouse button (or scrolling) should cycle the line while the figure has focus. The figure should have focus by default when it is created and re-gain it by clicking on the canvas. Clicking anywhere outside of the figure should release focus, but moving the mouse out of the figure should not release focus.\n\nimport itertools\nfig, ax = plt.subplots()\nx = np.linspace(0,10,10000)\ny = np.sin(x)\nln, = ax.plot(x,y)\nevt = []\ncolors = iter(itertools.cycle(['r', 'g', 'b', 'k', 'c']))\ndef on_event(event):\n    if event.name.startswith('key'):\n        fig.suptitle('%s: %s' % (event.name, event.key))\n    elif event.name == 'scroll_event':\n        fig.suptitle('%s: %s' % (event.name, event.step))\n    else:\n        fig.suptitle('%s: %s' % (event.name, event.button))\n    evt.append(event)\n    ln.set_color(next(colors))\n    fig.canvas.draw()\n    fig.canvas.draw_idle()\n\nfig.canvas.mpl_connect('button_press_event', on_event)\nfig.canvas.mpl_connect('button_release_event', on_event)\nfig.canvas.mpl_connect('scroll_event', on_event)\nfig.canvas.mpl_connect('key_press_event', on_event)\nfig.canvas.mpl_connect('key_release_event', on_event)\n\nplt.show()\n\n\n\nUAT 17 - Timers\nSingle-shot timers follow a completely different code path in the nbagg backend than regular timers (such as those used in the animation example above.) The next set of tests ensures that both “regular” and “single-shot” timers work properly.\nThe following should show a simple clock that updates twice a second:\n\nimport time\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\n\ndef update(text):\n    text.set(text=time.ctime())\n    text.axes.figure.canvas.draw()\n    \ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\ntimer.start()\nplt.show()\n\nHowever, the following should only update once and then stop:\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center') \ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.single_shot = True\ntimer.start()\n\nplt.show()\n\nAnd the next two examples should never show any visible text at all:\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.start()\ntimer.stop()\n\nplt.show()\n\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.single_shot = True\ntimer.start()\ntimer.stop()\n\nplt.show()\n\n\n\nUAT 18 - stopping figure when removed from DOM\nWhen the div that contains from the figure is removed from the DOM the figure should shut down it’s comm, and if the python-side figure has no more active comms, it should destroy the figure. Repeatedly running the cell below should always have the same figure number\n\nfig, ax = plt.subplots()\nax.plot(range(5))\nplt.show()\n\nRunning the cell below will re-show the figure. After this, re-running the cell above should result in a new figure number.\n\nfig.canvas.manager.reshow()\n\n\n\nUAT 19 - Blitting\nClicking on the figure should plot a green horizontal line moving up the axes.\n\nimport itertools\n\ncnt = itertools.count()\nbg = None\n\ndef onclick_handle(event):\n    \"\"\"Should draw elevating green line on each mouse click\"\"\"\n    global bg\n    if bg is None:\n        bg = ax.figure.canvas.copy_from_bbox(ax.bbox) \n    ax.figure.canvas.restore_region(bg)\n\n    cur_y = (next(cnt) % 10) * 0.1\n    ln.set_ydata([cur_y, cur_y])\n    ax.draw_artist(ln)\n    ax.figure.canvas.blit(ax.bbox)\n\nfig, ax = plt.subplots()\nax.plot([0, 1], [0, 1], 'r')\nln, = ax.plot([0, 1], [0, 0], 'g', animated=True)\nplt.show()\nax.figure.canvas.draw()\n\nax.figure.canvas.mpl_connect('button_press_event', onclick_handle)"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Autokill.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Autokill.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "import os\nimport signal\npid = os.getpid()\nos.kill(pid, signal.SIGTERM)"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Check History in Memory.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Check History in Memory.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "from IPython import get_ipython\n\n\nip = get_ipython()\nassert ip.history_manager.hist_file == ':memory:'"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Clear Output.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Clear Output.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "from __future__ import print_function\nfrom IPython.display import clear_output\n\n\nfor i in range(10):\n    clear_output()\n    print(i)\n\n9\n\n\n\nprint(\"Hello world\")\nclear_output()\n\n\nprint(\"Hello world\", end='')\nclear_output(wait=True)  # no output after this\n\nHello world\n\n\n\nprint(\"Hello\", end='')\nclear_output(wait=True)  # here we have new output after wait=True\nprint(\"world\", end='')\n\nworld\n\n\n\nhandle0 = display(\"Hello world\", display_id=\"id0\")\n\n'Hello world'\n\n\n\nhandle1 = display(\"Hello\", display_id=\"id1\")\n\n'world'\n\n\n\nhandle1.update('world')\n\n\nhandle2 = display(\"Hello world\", display_id=\"id2\")\nclear_output()  # clears all output, also with display_ids\n\n\nhandle3 = display(\"Hello world\", display_id=\"id3\")\nclear_output(wait=True)\n\n'Hello world'\n\n\n\nhandle4 = display(\"Hello\", display_id=\"id4\")\nclear_output(wait=True)\nprint('world', end='')\n\nworld\n\n\n\nhandle4.update('Hello world')  # it is cleared, so it should not show up in the above cell"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Disable Stdin.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Disable Stdin.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "try:\n    input = raw_input\nexcept:\n    pass\n\nname = input(\"name: \")"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Empty Cell.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Empty Cell.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Test that executing skips over an empty cell.\n\n\"Code 1\"\n\n'Code 1'\n\n\n\n\"Code 2\"\n\n'Code 2'"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Error.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Error.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "0/0\n\nZeroDivisionError: division by zero"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Factorials.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Factorials.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "i, j = 1, 1\n\n\nfor m in range(10):\n    i, j = j, i + j\n    print(j)\n\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/HelloWorld.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/HelloWorld.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "print(\"Hello World\")\n\nHello World"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Inline Image.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Inline Image.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "from IPython.display import Image\n\n\nImage('python.png')"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Interrupt.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Interrupt.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "while True: continue\n\nKeyboardInterrupt: \n\n\n\nprint(\"done\")\n\ndone"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/JupyterWidgets.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/JupyterWidgets.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "import ipywidgets\nlabel = ipywidgets.Label('Hello World')\nlabel\n\n\n\n\n\n# it should also handle custom msg'es\nlabel.send({'msg': 'Hello'})"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Other Comms.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Other Comms.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "from ipykernel.comm import Comm\n\n\ncomm = Comm('this-comm-tests-a-missing-handler', data={'id': 'foo'})\n\n\ncomm.send(data={'id': 'bar'})"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Output.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Output.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "import ipywidgets as widgets\nfrom IPython.display import clear_output\noutput1 = widgets.Output()\noutput1\n\n\n\n\n\nprint(\"hi\")\nwith output1:\n    print(\"in output\")\n\nhi\n\n\n\nwith output1:\n    raise ValueError(\"trigger msg_type=error\")\n\n\nimport ipywidgets as widgets\noutput2 = widgets.Output()\noutput2\n\n\n\n\n\nprint(\"hi2\")\nwith output2:\n    print(\"in output2\")\n    clear_output(wait=True)\n\nhi2\n\n\n\nimport ipywidgets as widgets\noutput3 = widgets.Output()\noutput3\n\n\n\n\n\nprint(\"hi3\")\nwith output3:\n    print(\"hello\")\n    clear_output(wait=True)\n    print(\"world\")\n\nhi3\n\n\n\nimport ipywidgets as widgets\noutput4 = widgets.Output()\noutput4\n\n\n\n\n\nprint(\"hi4\")\nwith output4:\n    print(\"hello world\")\n    clear_output()\n\nhi4\n\n\n\nimport ipywidgets as widgets\noutput5 = widgets.Output()\noutput5\n\n\n\n\n\nprint(\"hi5\")\nwith output5:\n    display(\"hello world\") # this is not a stream but plain text\nclear_output()\n\n\nimport ipywidgets as widgets\noutput_outer = widgets.Output()\noutput_inner = widgets.Output()\noutput_inner\n\n\n\n\n\noutput_outer\n\n\n\n\n\nwith output_inner:\n    print('in inner')\n    with output_outer:\n        print('in outer')\n    print('also in inner')"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Parallel Execute A.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Parallel Execute A.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Ensure notebooks can execute in parallel\nThis notebook uses a file system based “lock” to assert that two instances of the notebook kernel will run in parallel. Each instance writes to a file in a temporary directory, and then tries to read the other file from the temporary directory, so that running them in sequence will fail, but running them in parallel will succeed.\nTwo notebooks are launched, each which sets the this_notebook variable. One notebook is set to this_notebook = 'A' and the other this_notebook = 'B'.\n\nimport os\nimport os.path\nimport tempfile\nimport time\n\n\n# the variable this_notebook is injectected in a cell above by the test framework.\nthis_notebook = 'A'\nother_notebook = 'B'\ndirectory = os.environ['NBEXECUTE_TEST_PARALLEL_TMPDIR']\nwith open(os.path.join(directory, 'test_file_{}.txt'.format(this_notebook)), 'w') as f:\n    f.write('Hello from {}'.format(this_notebook))\n\n\nstart = time.time()\ntimeout = 5\nend = start + timeout\ntarget_file = os.path.join(directory, 'test_file_{}.txt'.format(other_notebook))\nwhile time.time() < end:\n    time.sleep(0.1)\n    if os.path.exists(target_file):\n        with open(target_file, 'r') as f:\n            text = f.read()\n        if text == 'Hello from {}'.format(other_notebook):\n            break\nelse:\n    assert False, \"Timed out – didn't get a message from {}\".format(other_notebook)"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Parallel Execute B.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Parallel Execute B.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Ensure notebooks can execute in parallel\nThis notebook uses a file system based “lock” to assert that two instances of the notebook kernel will run in parallel. Each instance writes to a file in a temporary directory, and then tries to read the other file from the temporary directory, so that running them in sequence will fail, but running them in parallel will succeed.\nTwo notebooks are launched, each which sets the this_notebook variable. One notebook is set to this_notebook = 'A' and the other this_notebook = 'B'.\n\nimport os\nimport os.path\nimport tempfile\nimport time\n\n\n# the variable this_notebook is injectected in a cell above by the test framework.\nthis_notebook = 'B'\nother_notebook = 'A'\ndirectory = os.environ['NBEXECUTE_TEST_PARALLEL_TMPDIR']\nwith open(os.path.join(directory, 'test_file_{}.txt'.format(this_notebook)), 'w') as f:\n    f.write('Hello from {}'.format(this_notebook))\n\n\nstart = time.time()\ntimeout = 5\nend = start + timeout\ntarget_file = os.path.join(directory, 'test_file_{}.txt'.format(other_notebook))\nwhile time.time() < end:\n    time.sleep(0.1)\n    if os.path.exists(target_file):\n        with open(target_file, 'r') as f:\n            text = f.read()\n        if text == 'Hello from {}'.format(other_notebook):\n            break\nelse:\n    assert False, \"Timed out – didn't get a message from {}\".format(other_notebook)"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Skip Exceptions with Cell Tags.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Skip Exceptions with Cell Tags.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "# üñîçø∂é\nraise Exception(\"message\")\n\nException: message\n\n\n\nprint('ok')\n\nok"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Skip Exceptions.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Skip Exceptions.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "# üñîçø∂é\nraise Exception(\"message\")\n\nException: message\n\n\n\nprint('ok')\n\nok"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Skip Execution with Cell Tag.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Skip Execution with Cell Tag.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "print(\"a long running cell\")\n\n\nprint('ok')\n\nok"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Sleep1s.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Sleep1s.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "import time\nimport datetime\n\n\nt0 = datetime.datetime.utcnow()\ntime.sleep(1)\nt1 = datetime.datetime.utcnow()\n\n\ntime_format = '%Y-%m-%dT%H:%M:%S.%fZ'\nprint(t0.strftime(time_format), end='')\n\n\nprint(t1.strftime(time_format), end='')"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/SVG.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/SVG.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "from IPython.display import SVG\n\n\nSVG(data='''\n<svg height=\"100\" width=\"100\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"2\" fill=\"red\" />\n</svg>''')"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/Unicode.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/Unicode.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "print('☃')\n\n☃"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/UnicodePy3.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/UnicodePy3.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "print('☃')\n\n☃"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/nbclient/tests/files/update-display-id.html",
    "href": "envs/quarto/Lib/site-packages/nbclient/tests/files/update-display-id.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "ip = get_ipython()\n\nfrom IPython.display import display\n\ndef display_with_id(obj, display_id, update=False, execute_result=False):\n    iopub = ip.kernel.iopub_socket\n    session = get_ipython().kernel.session\n    data, md = ip.display_formatter.format(obj)\n    transient = {'display_id': str(display_id)}\n    content = {'data': data, 'metadata': md, 'transient': transient}\n    if execute_result:\n      msg_type = 'execute_result'\n      content['execution_count'] = ip.execution_count\n    else:\n      msg_type = 'update_display_data' if update else 'display_data'\n    session.send(iopub, msg_type, content, parent=ip.parent_header)\n\n\ndisplay('above')\ndisplay_with_id(1, 'here')\ndisplay('below')\n\n'above'\n\n\n8\n\n\n'below'\n\n\n\ndisplay_with_id(2, 'here')\ndisplay_with_id(3, 'there')\ndisplay_with_id(4, 'here')\n\n8\n\n\n6\n\n\n8\n\n\n\ndisplay_with_id(5, 'there')\ndisplay_with_id(6, 'there', update=True)\n\n6\n\n\n\ndisplay_with_id(7, 'here')\ndisplay_with_id(8, 'here', update=True)\ndisplay_with_id(9, 'result', execute_result=True)\n\n8\n\n\n10\n\n\n\ndisplay_with_id(10, 'result', update=True)"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/pyzmq-25.0.2.dist-info/AUTHORS.html",
    "href": "envs/quarto/Lib/site-packages/pyzmq-25.0.2.dist-info/AUTHORS.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "This project was started and continues to be led by Brian E. Granger (ellisonbg AT gmail DOT com). Min Ragan-Kelley (benjaminrk AT gmail DOT com) is the primary developer of pyzmq at this time.\nThe following people have contributed to the project:\n\nAlexander Else (alexander DOT else AT team DOT telstra DOT com)\nAlexander Pyhalov (apyhalov AT gmail DOT com)\nAlexandr Emelin (frvzmb AT gmail DOT com)\nAmr Ali (amr AT ledgerx DOT com)\nAndre Caron (andre DOT l DOT caron AT gmail DOT com)\nAndrea Crotti (andrea DOT crotti DOT 0 AT gmail DOT com)\nAndrew Gwozdziewycz (git AT apgwoz DOT com)\nBaptiste Lepilleur (baptiste DOT lepilleur AT gmail DOT com)\nBrandyn A. White (bwhite AT dappervision DOT com)\nBrian E. Granger (ellisonbg AT gmail DOT com)\nBrian Hoffman (hoffman_brian AT bah DOT com)\nCarlos A. Rocha (carlos DOT rocha AT gmail DOT com)\nChris Laws (clawsicus AT gmail DOT com)\nChristian Wyglendowski (christian AT bu DOT mp)\nChristoph Gohlke (cgohlke AT uci DOT edu)\nCurtis (curtis AT tinbrain DOT net)\nCyril Holweck (cyril DOT holweck AT free DOT fr)\nDan Colish (dcolish AT gmail DOT com)\nDaniel Lundin (dln AT eintr DOT org)\nDaniel Truemper (truemped AT googlemail DOT com)\nDouglas Creager (douglas DOT creager AT redjack DOT com)\nEduardo Stalinho (eduardooc DOT 86 AT gmail DOT com)\nEren Güven (erenguven0 AT gmail DOT com)\nErick Tryzelaar (erick DOT tryzelaar AT gmail DOT com)\nErik Tollerud (erik DOT tollerud AT gmail DOT com)\nFELD Boris (lothiraldan AT gmail DOT com)\nFantix King (fantix DOT king AT gmail DOT com)\nFelipe Cruz (felipecruz AT loogica DOT net)\nFernando Perez (Fernando DOT Perez AT berkeley DOT edu)\nFrank Wiles (frank AT revsys DOT com)\nFélix-Antoine Fortin (felix DOT antoine DOT fortin AT gmail DOT com)\nGavrie Philipson (gavriep AT il DOT ibm DOT com)\nGodefroid Chapelle (gotcha AT bubblenet DOT be)\nGreg Banks (gbanks AT mybasis DOT com)\nGreg Ward (greg AT gerg DOT ca)\nGuido Goldstein (github AT a-nugget DOT de)\nIan Lee (IanLee1521 AT gmail DOT com)\nIonuț Arțăriși (ionut AT artarisi DOT eu)\nIvo Danihelka (ivo AT danihelka DOT net)\nIyed (iyed DOT bennour AT gmail DOT com)\nJim Garrison (jim AT garrison DOT cc)\nJohn Gallagher (johnkgallagher AT gmail DOT com)\nJulian Taylor (jtaylor DOT debian AT googlemail DOT com)\nJustin Bronder (jsbronder AT gmail DOT com)\nJustin Riley (justin DOT t DOT riley AT gmail DOT com)\nMarc Abramowitz (marc AT marc-abramowitz DOT com)\nMatthew Aburn (mattja6 AT gmail DOT com)\nMichel Pelletier (pelletier DOT michel AT gmail DOT com)\nMichel Zou (xantares09 AT hotmail DOT com)\nMin Ragan-Kelley (benjaminrk AT gmail DOT com)\nNell Hardcastle (nell AT dev-nell DOT com)\nNicholas Pilkington (nicholas DOT pilkington AT gmail DOT com)\nNicholas Piël (nicholas AT nichol DOT as)\nNick Pellegrino (npellegrino AT mozilla DOT com)\nNicolas Delaby (nicolas DOT delaby AT ezeep DOT com)\nOndrej Certik (ondrej AT certik DOT cz)\nPaul Colomiets (paul AT colomiets DOT name)\nPawel Jasinski (pawel DOT jasinski AT gmail DOT com)\nPhus Lu (phus DOT lu AT gmail DOT com)\nRobert Buchholz (rbu AT goodpoint DOT de)\nRobert Jordens (jordens AT gmail DOT com)\nRyan Cox (ryan DOT a DOT cox AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nScott Maxwell (scott AT codecobblers DOT com)\nScott Sadler (github AT mashi DOT org)\nSimon Knight (simon DOT knight AT gmail DOT com)\nStefan Friesel (sf AT cloudcontrol DOT de)\nStefan van der Walt (stefan AT sun DOT ac DOT za)\nStephen Diehl (stephen DOT m DOT diehl AT gmail DOT com)\nSylvain Corlay (scorlay AT bloomberg DOT net)\nThomas Kluyver (takowl AT gmail DOT com)\nThomas Spura (tomspur AT fedoraproject DOT org)\nTigger Bear (Tigger AT Tiggers-Mac-mini DOT local)\nTorsten Landschoff (torsten DOT landschoff AT dynamore DOT de)\nVadim Markovtsev (v DOT markovtsev AT samsung DOT com)\nYannick Hold (yannickhold AT gmail DOT com)\nZbigniew Jędrzejewski-Szmek (zbyszek AT in DOT waw DOT pl)\nhugo shi (hugoshi AT bleb2 DOT (none))\njdgleeson (jdgleeson AT mac DOT com)\nkyledj (kyle AT bucebuce DOT com)\nspez (steve AT hipmunk DOT com)\nstu (stuart DOT axon AT jpcreative DOT co DOT uk)\nxantares (xantares AT fujitsu-l64 DOT (none))\n\nas reported by:\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.\\([^ ]\\)/ DOT \\1/g'\nwith some adjustments.\n\n\n\nBrandon Craig-Rhodes (brandon AT rhodesmill DOT org)\nEugene Chernyshov (chernyshov DOT eugene AT gmail DOT com)\nCraig Austin (craig DOT austin AT gmail DOT com)\n\n\n\n\n\nTravis Cline (travis DOT cline AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nZachary Voase (z AT zacharyvoase DOT com)"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/QtPy-2.3.0.dist-info/AUTHORS.html",
    "href": "envs/quarto/Lib/site-packages/QtPy-2.3.0.dist-info/AUTHORS.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)\n\n\n\n\n\nDaniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)\n\n\n\n\n\nThe QtPy Contributors"
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/seaborn-0.12.2.dist-info/LICENSE.html",
    "href": "envs/quarto/Lib/site-packages/seaborn-0.12.2.dist-info/LICENSE.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Copyright (c) 2012-2021, Michael L. Waskom All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/soupsieve-2.3.2.post1.dist-info/licenses/LICENSE.html",
    "href": "envs/quarto/Lib/site-packages/soupsieve-2.3.2.post1.dist-info/licenses/LICENSE.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "MIT License\nCopyright (c) 2018 - 2022 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "envs/quarto/Lib/site-packages/traitlets-5.9.0.dist-info/licenses/COPYING.html",
    "href": "envs/quarto/Lib/site-packages/traitlets-5.9.0.dist-info/licenses/COPYING.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Traitlets is adapted from enthought.traits, Copyright (c) Enthought, Inc., under the terms of the Modified BSD License.\nThis project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-, IPython Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the IPython Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe IPython Development Team is the set of all contributors to the IPython project. This includes all of the IPython subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nIPython uses a shared copyright model. Each contributor maintains copyright over their contributions to IPython. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the IPython source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire IPython Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the IPython repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "envs/quarto/Library/share/doc/libjpeg-turbo/LICENSE.html",
    "href": "envs/quarto/Library/share/doc/libjpeg-turbo/LICENSE.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "libjpeg-turbo Licenses\nlibjpeg-turbo is covered by three compatible BSD-style open source licenses:\n\nThe IJG (Independent JPEG Group) License, which is listed in README.ijg\nThis license applies to the libjpeg API library and associated programs (any code inherited from libjpeg, and any modifications to that code.)\nThe Modified (3-clause) BSD License, which is listed below\nThis license covers the TurboJPEG API library and associated programs, as well as the build system.\nThe zlib License\nThis license is a subset of the other two, and it covers the libjpeg-turbo SIMD extensions.\n\n\n\nComplying with the libjpeg-turbo Licenses\nThis section provides a roll-up of the libjpeg-turbo licensing terms, to the best of our understanding.\n\nIf you are distributing a modified version of the libjpeg-turbo source, then:\n\nYou cannot alter or remove any existing copyright or license notices from the source.\nOrigin\n\nClause 1 of the IJG License\nClause 1 of the Modified BSD License\nClauses 1 and 3 of the zlib License\n\nYou must add your own copyright notice to the header of each source file you modified, so others can tell that you modified that file (if there is not an existing copyright header in that file, then you can simply add a notice stating that you modified the file.)\nOrigin\n\nClause 1 of the IJG License\nClause 2 of the zlib License\n\nYou must include the IJG README file, and you must not alter any of the copyright or license text in that file.\nOrigin\n\nClause 1 of the IJG License\n\n\nIf you are distributing only libjpeg-turbo binaries without the source, or if you are distributing an application that statically links with libjpeg-turbo, then:\n\nYour product documentation must include a message stating:\nThis software is based in part on the work of the Independent JPEG Group.\nOrigin\n\nClause 2 of the IJG license\n\nIf your binary distribution includes or uses the TurboJPEG API, then your product documentation must include the text of the Modified BSD License (see below.)\nOrigin\n\nClause 2 of the Modified BSD License\n\n\nYou cannot use the name of the IJG or The libjpeg-turbo Project or the contributors thereof in advertising, publicity, etc.\nOrigin\n\nIJG License\nClause 3 of the Modified BSD License\n\nThe IJG and The libjpeg-turbo Project do not warrant libjpeg-turbo to be free of defects, nor do we accept any liability for undesirable consequences resulting from your use of the software.\nOrigin\n\nIJG License\nModified BSD License\nzlib License\n\n\n\n\nThe Modified (3-clause) BSD License\nCopyright (C)2009-2023 D. R. Commander. All Rights Reserved. Copyright (C)2015 Viktor Szathmáry. All Rights Reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the libjpeg-turbo Project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”, AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nWhy Three Licenses?\nThe zlib License could have been used instead of the Modified (3-clause) BSD License, and since the IJG License effectively subsumes the distribution conditions of the zlib License, this would have effectively placed libjpeg-turbo binary distributions under the IJG License. However, the IJG License specifically refers to the Independent JPEG Group and does not extend attribution and endorsement protections to other entities. Thus, it was desirable to choose a license that granted us the same protections for new code that were granted to the IJG for code derived from their software."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ethan Orlowsky",
    "section": "",
    "text": "Posts\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\nJust scraping by\n\n\nWebscraping techniques to overcome difficult websites\n\n\n\n\ndaily fantasy sports\n\n\nwebscraping\n\n\n \n\n\n\n\nMay 20, 2023\n\n\n10 min\n\n\n\n\n\n\n\n\nRiddle me this\n\n\nan Introduction to a DFS Lineup Generating Algorithm\n\n\n\n\ndaily fantasy sports\n\n\n \n\n\n\n\nFeb 10, 2023\n\n\n7 min\n\n\n\n\n\n\n\n\nExtreme Couponing\n\n\nCoupon Collector’s Problem Generalized to K sets of coupons\n\n\n\n\nprobability\n\n\n \n\n\n\n\nJan 23, 2023\n\n\n11 min\n\n\n\n\n\n\n\n\nResearch Archives\n\n\nThings I found interesting\n\n\n\n\nmisc\n\n\n \n\n\n\n\nJan 1, 2023\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/coupon-collector/index.html",
    "href": "posts/coupon-collector/index.html",
    "title": "Extreme Couponing",
    "section": "",
    "text": "The traditional coupon collector’s problem asks the following question:\n\nIf there are n different kinds of coupons, and all coupons have the same probability of being drawn, how many coupons do you expect to draw with replacement to collect all kinds of coupons?\n\nWikipedia has a good explanation, so I will use that as a template for my calculation.\nLet \\(T\\) be the random variable representing the number of coupons we draw before collecting the entire set of coupons. We can decompose \\(T\\) into the sum of \\(n\\) random variables, \\(t_i\\), where \\(t_i\\) is the number of coupons drawn to get the \\(i^{th}\\) distinct coupon after \\(i - 1\\) distinct coupons have already been drawn.\n\\[\\begin{align*}\n    T = t_1 + t_2 + \\ldots + t_n\n\\end{align*}\\]\n\n\n\n\n\n\nNote\n\n\n\nA common mistake is to decompose \\(T\\) into random variables \\(t_i\\), where \\(t_i\\) represents the number of coupons drawn to collect coupon #\\(i\\).\nThis is incorrect because we are likely going to be double-counting coupon draws. Let’s look at a simple example where \\(n = 2\\), and we draw coupon #\\(1\\), then coupon #\\(2\\). This method would set \\(t_1 = 1\\), \\(t_2 = 2\\), and \\(T = 3\\). Obviously this isn’t correct, but it’s easily mistakable when you haven’t seen the right way to approach the problem first.\n\n\nUsing Linearity of Expectation, we can separate our problem into simpler subproblems.\n\\[\\begin{align*}\n    E[T]\n    &= E[t_1 + t_2 + \\ldots + t_n] \\\\\n    &= E[t_1] + E[t_2] + \\ldots + E[t_n]\n\\end{align*}\\]\nNow the problem is finding what the general solution is for a number of the form \\(E[t_i]\\). \\(E[t_i]\\) captures the expected number of coupon draws to get the \\(i^{th}\\) distinct coupon after \\(i - 1\\) distinct coupons have already been drawn. We know that if \\(i - 1\\) out of \\(n\\) coupons have been drawn already, there are \\(n - i + 1\\) remaining coupons we still need to draw. So the probability we draw a new coupon is \\(\\frac{n - i + 1}{n}\\). \\(t_i\\) is satisfied on the first such success, so it has a Geometric Distribution. The expected value of a geometric random variable is \\(\\frac{1}{p}\\), or in our case, \\(\\frac{n}{n - i + 1}\\). We can now go back and solve for \\(E[T]\\).\n\\[\\begin{align*}\n    E[T]\n    &= E[t_1 + t_2 + \\ldots + t_n] \\\\\n    &= E[t_1] + E[t_2] + \\ldots + E[t_n] \\\\\n    &= \\frac{n}{n} + \\frac{n}{n - 1} + \\ldots + \\frac{n}{1} \\\\\n    &= n \\left( \\frac{1}{1} + \\frac{1}{2} + \\ldots + \\frac{1}{n} \\right) \\\\\n    &= n H_n\n\\end{align*}\\]\nwhere \\(H_n\\) is the \\(n^{th}\\) Harmonic Number. The harmonic numbers don’t have a closed form solution, but we can easily calculate them for small enough \\(N\\). We can visualize our solution using Python.\n\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\nN = 50\n\ndef harmonic(n):\n    return sum(1 / i for i in range(1, n + 1))\n\nexpectations = [n * harmonic(n) for n in range(N)]\n\nplt.plot(range(1, N + 1), expectations)\nplt.gca().set(title=\"Coupon Collector's Problem\",\n              xlabel='N', \n              ylabel='Expected Draws')\nplt.show()"
  },
  {
    "objectID": "posts/coupon-collector/index.html#generalizing-to-k-sets-of-coupons",
    "href": "posts/coupon-collector/index.html#generalizing-to-k-sets-of-coupons",
    "title": "Extreme Couponing",
    "section": "Generalizing to K sets of Coupons",
    "text": "Generalizing to K sets of Coupons\nA natural extension to this warmup is asking how things change when we need to collect K of each coupon. Unfortunately, we need to take a completely different approach than we did for the case of \\(K = 1\\). We must now leverage combinatorics.\nFirst, let’s define a few terms. We are trying to find the expected number of coupons we must draw before getting \\(K\\) of each, or \\(E_K[T]\\). \\(T\\) takes on integer values, so we can rewrite our expectation as:\n\\[\\begin{align*}\n    E_K[T]\n    &= \\sum_{i=0}^\\infty i \\cdot P(T = i) \\\\\n    &= P(T = 1) + 2 \\cdot P(T = 2) + 3 \\cdot P(T = 3) + \\ldots \\\\\n    &= P(T = 1) + P(T = 2) + P(T = 3) + \\ldots \\\\\n    & \\hspace{54pt} + P(T = 2) + P(T = 3) + \\ldots \\\\\n    & \\hspace{107pt} + P(T = 3) + \\ldots \\\\\n    & \\hspace{160pt} + \\ldots \\\\\n    &= P(T > 0) + P(T > 1) + P(T > 2) + \\ldots \\\\\n    &= \\sum_{i = 0}^\\infty P(T > i) \\\\\n    &= \\sum_{i = 0}^\\infty p_i\n\\end{align*}\\]\nwhere \\(p_i = P(T > i)\\). The interpretation of \\(p_i\\) is the probability that we fail to collect \\(K\\) complete sets in \\(i\\) draws. Since there are \\(n\\) different kinds of coupons, there are \\(n^i\\) ways to draw \\(i\\) coupons. All the possible ways to draw these coupons can be represented as the polynomial:\n\\[\\begin{align*}\n    (x_1 + \\ldots + x_n)^i\n\\end{align*}\\]\nIf we were to expand this polynomial, each term would represent a combination of possible draws. For example, one of the terms in the expansion would be \\(x_1^3x_5x_9^7x_{12}^{i - 11}\\). This term represents the event of pulling 3 of coupon #1, 1 of coupon #5, 7 of coupon #9, and the remaining \\(i - 11\\) being coupon #12. Of course there are multiple ways (permutations) to pull this combination of coupons, so there would also be a coefficient on the term indicating how many ways this can be done.\n\n\n\n\n\n\nNote\n\n\n\nThough not core to the problem at hand, we can quickly discuss what that coefficient would be. Sticking with our previous example of \\(x_1^3x_5x_9^7x_{12}^{i - 11}\\), we start by thinking about how we can assign an order for these given amounts of coupons. We have \\(i\\) spots, and 3 of coupon #1, so there are \\({i \\choose 3}\\) ways to pick where the first kind of coupon go. After these are assigned, there are \\(i - 3\\) spots remaining, so there are \\({i - 3 \\choose 1}\\) ways to assign the singular coupon #5 to a spot. Following this reasoning will yield \\({i - 4 \\choose 7}\\) and \\({i - 11 \\choose i - 11}\\) as the remaining ways to assign the final two types of coupons. Multiplying all of these “choose” operations gives us the total ways to assign the coupons.\n\\[\\begin{align*}\n    {i \\choose 3} \\cdot {i - 3 \\choose 1} \\cdot {i - 4 \\choose 7} \\cdot {i - 11 \\choose i - 11}\n    &= \\frac{i!}{(i - 3)!3!} \\cdot \\frac{(i - 3)!}{(i - 4)!1!} \\cdot \\frac{(i - 4)!}{(i - 11)!7!}\n       \\cdot \\frac{(i - 11)!}{0!(i - 11)!} \\\\\n    &= \\frac{i!}{3!1!7!(i - 11)!}\n\\end{align*}\\]\nThe result is just the total ways you can arrange \\(i\\) distinct coupons (suppose coupons of the same type were somehow distinguishable), divided by the number of ways a given ordering is duplicated because coupons of the same type are not actually meaningfully distinguishable.\n\n\nNow, suppose we expanded the polynomial above fully. The terms where all \\(x_j\\) are raised to a power \\(\\ge K\\) represent successfully collecting \\(K\\) sets of all \\(n\\) coupons. If we remove all terms representing completed sets, then we are left with only incomplete collections. We can denote this removal process with the notation \\(\\{(x_1 + \\ldots + x_n)^i\\}_K\\). “The Double Dixie Cup Problem” [1] defines this formally:\n\nIf \\(P(x_1, \\ldots, x_n)\\) is a polynomial or power series we define \\(\\{P(x_1, \\ldots, x_n)\\}_K\\) to be the polynomial, or series, resulting when all terms having all exponents \\(\\ge K\\) have been removed.\n\nNow, note that if we evaluate \\(\\{(x_1 + \\ldots + x_n)^i\\}_K\\) at \\(x_1 = \\ldots = x_n = 1\\), we get a number that represents the number of draws that result in incomplete collections. Further, \\(\\frac{\\{(x_1 + \\ldots + x_n)^i\\}_K}{n^i}\\) evaluated at all 1’s is just the probability that we fail to complete \\(K\\) collections in \\(i\\) draws, or \\(p_i\\). This takes us a step forward in our expectation calculation.\n\\[\\begin{align*}\n    E_K[T]\n    &= \\sum_{i = 0}^\\infty p_i \\\\\n    &= \\sum_{i = 0}^\\infty \\frac{\\{(x_1 + \\ldots + x_n)^i\\}_K}{n^i}\n\\end{align*}\\]\nBut finding a way to evaluate the summand is not immediately obvious. To do this, we must find something we do know that looks similar to the above form, namely the exponential Power Series. As a reminder, the exponential power series is:\n\\[\\begin{align*}\n    e^x\n    &= \\sum_{i = 0}^\\infty \\frac{x^i}{i!}\n\\end{align*}\\]\nThis is the one-variable case, but to match the form of our previous work, we can use the generalized form which looks like:\n\\[\\begin{align*}\n    e^{x_1 + \\ldots + x_n}\n    &= \\sum_{i = 0}^\\infty \\frac{(x_1 + \\ldots + x_n)^i}{i!}\n\\end{align*}\\]\nWe’re getting closer, but we still need to encapsulate the polynomial in the \\(\\{\\cdot\\}_K\\) operator. To do this requires a little leap of faith. Using exponent rules and the single-variable exponential power series, we can equivalently find that:\n\\[\\begin{align*}\n    e^{x_1 + \\ldots + x_n}\n    &= e^{x_1}\\cdots e^{x_n} \\\\\n    &= \\bigg( 1 + x_1 + \\frac{x_1^2}{2!} + \\ldots \\bigg) \\cdots\n       \\bigg( 1 + x_n + \\frac{x_n^2}{2!} + \\ldots \\bigg)\n\\end{align*}\\]\nWhat we can gleam from this is that in this polynomial expansion, you are picking how many coupons were drawn of each type, instead of fixing a number of draws \\(i\\) like we did previously. If we ignore the coefficients for now and just focus on the \\(x_j\\)’s, we can see how for any possible combination of coupons you can think of, there is a way to get that combination by picking the correct term in each of the \\(n\\) power series expansions.\nThinking in the same vein, we can represent all the successful ways of achieving \\(K\\) complete sets by only including part of the taylor series expansions for each of the \\(e^{x_j}\\) terms. The part of the taylor series expansions that yield all the complete collections is:\n\\[\\begin{align*}\n    \\bigg( \\frac{x_1^K}{K!} + \\frac{x_1^{K+1}}{(K+1)!} + \\ldots \\bigg) \\cdots\n    \\bigg( \\frac{x_n^K}{K!} + \\frac{x_n^{K+1}}{(K+1)!} + \\ldots \\bigg)\n\\end{align*}\\]\nWhichever term you pick from each expansion, the exponent will always be at least \\(K\\), which means each term represents a different way to complete \\(K\\) sets of coupons. Since \\(p_i\\) represents the probability of failure, we want to get rid of these terms that represent successes. Doing just that and simplifying a little leaves us with:\n\\[\\begin{align*}\n    F\n    &= e^{x_1 + \\ldots + x_n}\n    - \\bigg( \\frac{x_1^K}{K!} + \\frac{x_1^{K+1}}{(K+1)!} + \\ldots \\bigg)\n    \\cdots \\bigg( \\frac{x_n^K}{K!} + \\frac{x_n^{K+1}}{(K+1)!} + \\ldots \\bigg) \\\\\n    &= e^{x_1 + \\ldots + x_n}\n    - \\bigg(e^{x_1} - S_K(x_1) \\bigg)\n    \\cdots \\bigg(e^{x_n} - S_K(x_n) \\bigg)\n\\end{align*}\\]\nwhere\n\\[\\begin{align*}\n    S_K(t)\n    &= \\sum_{i = 0}^{K - 1} \\frac{t^i}{i!}\n\\end{align*}\\]\nAnd by the discussion above that interpreted the subtraction of the product of the different power series expansions as removing all the scenarios that resulted in success, we claim that this expression is equal to:\n\\[\\begin{align*}\n    F\n    &= \\sum_{i = 0}^\\infty \\frac{\\{(x_1 + \\ldots + x_n)^i \\}_K}{i!}\n\\end{align*}\\]\nwhich is almost what \\(E_K[T]\\) is equal to. The only difference is that this denominator is \\(i!\\) compared to the desired \\(n^i\\). Luckily, there is an identity (that I have previously never heard of) that allows us to interchange between the two:\n\\[\\begin{align*}\n    n\\int_0^\\infty \\frac{t^i}{i!}e^{-nt} dt\n    &= \\frac{1}{n^i}\n\\end{align*}\\]\nSo, if we recall where we left off for \\(E_K[T]\\), we can plug this identity in which will allow us to use \\(F\\).\n\\[\\begin{align*}\n    E_K[T]\n    &= \\sum_{i = 0}^\\infty \\frac{\\{(x_1 + \\ldots + x_n)^i \\}_K}{n^i} \\\\\n    &= \\sum_{i = 0}^\\infty \\{(x_1 + \\ldots + x_n)^i \\}_K\n        \\left( n\\int_0^\\infty \\frac{t^i}{i!}e^{-nt} dt \\right) \\\\\n    &= n\\int_0^\\infty\\sum_{i = 0}^\\infty \\left(\n        \\frac{\\{(x_1 + \\ldots + x_n)^i \\}_K}{i!}t^i\\right)e^{-nt} dt \\\\\n    &= n\\int_0^\\infty \\left( e^{t(x_1 + \\ldots + x_n)} -\n        \\left( e^{tx_1} - S_K(tx_1) \\right) \\cdots \\left( e^{tx_n} - S_K(tx_n) \\right) \\right)e^{-nt} dt \\\\\n\\end{align*}\\]\nWe are able to switch the order of the sum and integral operators as a result of Fubini’s Theorem. Also, notice in line 3 that the summand isn’t exactly the same format that it was in \\(F\\). But this isn’t a problem because the only new term is \\(t^i\\), which appears in the power series for \\(e^t\\). The affect is that all exponents are multiplied by a factor of \\(t\\). Now, remembering that setting \\(x_1 = \\ldots = x_n = 1\\) effectively calculates the ratio of incomplete collections to possible collections, we can simplify the above equation dramatically.\n\\[\\begin{align*}\n    E_K[T]\n    &= n\\int_0^\\infty \\left( e^{tn} -\n        \\left( e^{t} - S_K(t) \\right)^n \\right)e^{-nt} dt \\\\\n    &= n\\int_0^\\infty 1 -\n        \\left( e^{t} - S_K(t) \\right)^ne^{-nt} dt \\\\\n    &= n\\int_0^\\infty 1 -\n        \\left( 1 - S_K(t)e^{-t} \\right)^n dt\n\\end{align*}\\]\nAnd that’s it! It’s okay to be a little bit unsatisfied at this answer since it does contain an integral that isn’t solvable by hand (to my knowledge). However, in the following code block, we will be looking at how we can use Python to get more concrete answers for some small examples.\n\nimport numpy as np\nfrom scipy import integrate\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\nfactorial = np.vectorize(np.math.factorial)\n\ndef S(K, t):\n    arr = np.arange(K)\n    return np.sum(np.power(t, arr) / factorial(arr))\n\ndef integrand(t, K, n):\n    return 1 - (1 - S(K, t) * np.exp(-t))**n\n\nn_range = np.arange(1, 11)\nK_range = np.arange(1, 11)\nresults = np.empty((n_range.size, K_range.size))\n\nfor n in n_range:\n    for K in K_range:\n        result, err = integrate.quad(integrand, 0, np.inf, args=(K, n))\n        results[n - 1, K - 1] = n * result\n\nfig, ax = plt.subplots()\n\nsns.heatmap(results, cmap='coolwarm', square=True, fmt='.1f', annot=True, \n            annot_kws={\"size\": 10}, ax=ax)\n\nax.set_title(\"Generalized Coupon Collector Problem\")\nax.set_xlabel(\"K\")\nax.set_ylabel(\"n\", rotation=0)\nax.set_xticklabels(K_range)\nax.set_yticklabels(n_range, rotation=0)\n\nfig.set_size_inches(8, 8)\nplt.show()"
  },
  {
    "objectID": "posts/dfs/index.html",
    "href": "posts/dfs/index.html",
    "title": "Riddle me this",
    "section": "",
    "text": "I’m known for my puzzles, my tricky ways,\nA challenge for Batman, every day.\nA question mark symbol, I often display,\nMy true identity, what do you say?\nSay hello to Riddler. Riddler is a project that aims to apply the “moneyball” approach to Daily Fantasy Sports (DFS). Using historical results, I believe I can algorithmically find the profit- maximizing entries into paid competitions. I plan on periodically creating blog posts to document my research and progress.\nFirst, you might be wondering why I decided to call it Riddler in the first place. Besides my love for riddles and puzzles, it is an acronym for how I would best describe this project\nThe goal of this post is to introduce the problem and outline the research plan and challenges that I anticipate will arise in the development of Riddler. I’ve broken up the development of Riddler into four parts: Optimization, Game Theory, Backtesting, and Extra Considerations."
  },
  {
    "objectID": "posts/dfs/index.html#introduction",
    "href": "posts/dfs/index.html#introduction",
    "title": "Riddle me this",
    "section": "Introduction",
    "text": "Introduction\nIn DFS, you pick a lineup of players each day. These players earn fantasy points depending on their real-world performance that day. There is no commitment like traditional fantasy sports, so you are able to place new and independent bets on the following day. There are many different contest types and styles, each of which has different payoffs, number of competitors, player pools, and more. The different contest types are:\n\n\n\nContest Type\nDescription\n\n\n\n\nTournaments\nSmall & Large field contests with HUGE prizes\n\n\nHead to Head\nFace-off against one opponent; winner takes all\n\n\n50/50s\nLand in the top half of the field and win cash\n\n\nDouble Ups\nWin and double your entry fee\n\n\nMultipliers\nMultiply your entry fee up to 11x when you win\n\n\nSatellites & Qualifiers\nWin your way into higher stakes contests\n\n\n\nAnd the different contest styles are:\n\n\n\n\n\n\n\nContest Style\nDescription\n\n\n\n\nClassic\nCreate an 8-player lineup while staying under the $50,000 salary cap. Includes Late Swap.\n\n\nShowdown Captain Mode\nCreate your team from 1 game, while staying under the $50,000 salary cap\n\n\nTiers\nOur no-salary format gets you in the game quicker – select one player from each tier\n\n\nIn-Game Showdown\nDraft your showdown team for a portion of a game\n\n\nSnake\nSnake draft a 7-player lineup\n\n\nSnake Showdown\nSnake draft a 4-player lineup\n\n\n\nMixing and matching types and styles allows you to come up with situational competitions where certain strategies could prove to be beneficial. Your choice of which competition to play in likely will have large effects on your performance and variance as a bettor."
  },
  {
    "objectID": "posts/dfs/index.html#optimization",
    "href": "posts/dfs/index.html#optimization",
    "title": "Riddle me this",
    "section": "Optimization",
    "text": "Optimization\nOptimization is the core problem. The high-level idea is that Riddler should return the lineup that expects the highest monetary return given a contest structure and player pool.\nDepending on the type and style of a competition, you might have different goals. From an optimization perspective, this translates to changing your optimization objective. Some objectives that might be intuitive include:\n\nMaximizing Expected Value\n\nCould be useful for Head to Head competitions because there is only one opponent. Since you only care about the chances that you score higher than one other person, variance might not matter as much – if you lose, you don’t care how much you lose by. We are risk-netural in this scenario.\n\nMaximizing Expected Value + k Standard Deviations\n\nCould be useful for Tournaments or Multiplier competitions because we need a really good outcome to beat the large number of competitors. High expected value might improve probability that we are in top 10%, but to maximize the chances we are in top 1%, we should also maximize variance/standard deviation. We are risk-seeking in this scenario.\n\nMaximizing Expected Value - k Standard Deviations\n\nCould be useful for 50/50s or Double Ups because we want to minimize the chance we land outside the top ~50% of entries. This type of optimization is known as Mean-Variance Optimization, and is a well-stuided topic in portfolio management. We are risk-averse in this scenario."
  },
  {
    "objectID": "posts/dfs/index.html#game-theory",
    "href": "posts/dfs/index.html#game-theory",
    "title": "Riddle me this",
    "section": "Game Theory",
    "text": "Game Theory\nGiven someway to optimize our lineups, the next question is how do we come up with a complex strategy that optimizes our expected return? Some contests allow for multiple entries, whereas some only allow one entry. How do we determine the value of submitting another marginal lineup?\nAdditionally, each contest has an upfront cost. Given a fixed bankroll, how much should we bet on each lineup? Riddler could either choose some fixed amount for each lineup, or make bigger bets on lineups it is more confident about. Do concepts like the Kelly Criterion come into play here (given that our win probability is not well-known)?\nThe questions I ask here are only a few of the considerations that need to be made when selecting a strategy. It should be clear now that simply optimizing a lineup according to a metric is only part of the problem. Because we really care about our overall success, we might not necessarily want to submit a lineup that has the highest expected value on its own; instead, the lineup that maximizes the expected value of our cumulative performance on the day might be preferable."
  },
  {
    "objectID": "posts/dfs/index.html#backtesting",
    "href": "posts/dfs/index.html#backtesting",
    "title": "Riddle me this",
    "section": "Backtesting",
    "text": "Backtesting\nBefore deploying a strategy, I’d ideally want to know ahead of time how much conviction I should have that it will actually work. This is where backtesting comes in. Here we’d want to use historical data to see how well our strategy would have performed in past competitions.\nThere are a myriad of issues that I foresee in this step due to some of the struggles I have already encountered. The most pressing matter is that I’m unable to find an extensive database of past results. Websites like RotoGrinders have results databases, but only for the past couple of years, even though contests had been running for many years prior. Additionally, a common struggle in backtesting is avoiding lookahead bias. Lookahead bias is when future information is used to make decisions. While it might seem obvious that this is a bad idea, in development settings, it is easy to accidentally use data that wouldn’t have existed at the time of your simulation. One situation that will require special attention to detail is keeping track of stats. Any simulation must keep track of running totals and averages at each point in time where a decision is being made instead of using the full season worth of stats that take into account games that they had not yet played."
  },
  {
    "objectID": "posts/dfs/index.html#extra-considerations",
    "href": "posts/dfs/index.html#extra-considerations",
    "title": "Riddle me this",
    "section": "Extra Considerations",
    "text": "Extra Considerations\nThis section aims to capture everything else that could present a challenge in the development of Riddler. The main topic of this section is developing estimates for player expected values and variances. There are a couple of naive approaches you could use like cumulative or rolling means, but its hard to quantify which one of these best captures what’s likely to happen in the next game. This could get very advanced and we could start examining specific matchups, days of rest in between games and past performance against a team. However, in an aim to focus on the optimal lineups and not to invent a new projection system, my goal is to find a projection that is “good enough.”\nAdditionally, real-time challenges are likely to pop-up. A real-time challenge may include an injury or trade. An injury is likely to effect the other teammates, but disproportinately. If a starting center got hurt, the backup center would stand to gain the most, whereas the backup point guard might not change in value too much. Trades also pose issues because its hard to predict new team dynamics without any historical data. Specifically, in optimization methods that rely on covariances between players, Riddler will have to completely guess the chemistry between players on the first game they play together. It could even be a good idea to just avoid games featuring a new player all together.\nEven though I just mentioned a few ideas, the takeaway from this section is that the data is bound to get messy, so the deployed strategy must not be exploitable in the face of these challenges."
  },
  {
    "objectID": "posts/dfs/index.html#conclusion",
    "href": "posts/dfs/index.html#conclusion",
    "title": "Riddle me this",
    "section": "Conclusion",
    "text": "Conclusion\nWith a roadmap in place, I anticipate the development of Riddler. There are many challenges ahead that I’ve never encountered before that I hope to learn from. As the ‘E’ in Riddler suggests, this project is economically-motivated. I do want to make money from this endeavor, and I truly believe there is money to be made if this is done correctly. With that said, I am happy to be sharing everything that I go over publicly. Even though I’m leaking alpha, I am rewarded by the chance to have my hard-work be recognized and studied. Excited for what’s to come and hope you are too."
  },
  {
    "objectID": "posts/dfs-scraping/index.html",
    "href": "posts/dfs-scraping/index.html",
    "title": "Just scraping by",
    "section": "",
    "text": "In the first blog post of the Riddler’s development, I want to talk about webscraping. The logical first step of Riddler was to collect data from Draft Kings. This data is a prerequisite for testing the performance of the lineup generation algorithm. To illustrate the dynamics of this project, I created a visualization below that captures some of the key processes.\nBy scraping Draft Kings, we can check off the “Contest Info” box. There is a lot of useful information we can obtain from their website, including:\nIf you navigate through the Draft Kings Lobby, you can easily find all this information for any contest."
  },
  {
    "objectID": "posts/dfs-scraping/index.html#my-first-attempt",
    "href": "posts/dfs-scraping/index.html#my-first-attempt",
    "title": "Just scraping by",
    "section": "My First Attempt",
    "text": "My First Attempt\nI was inspired to automate the contest information collection process using familiar webscraping techniques, like Requests and BeautifulSoup. However, upon my first iterations of scraping, I discovered these methods would not work well for my problem due to authentication requirements, and the volume of requests I needed to make. On certain parts of the website, I needed to send in cookies to prove that I had an account. While you can send cookies with the requests package, my problem was having cookies always ready. There were many session cookies that would expire within 24 hours, so I couldn’t just do this step manually once and call it a day. Additionally, there are on the scale of thousands of contests per day, and I needed to request information about each one. If I were to make requests sequentially, this scraping method would take a very long time, whereas I wanted it to take at most a couple minutes."
  },
  {
    "objectID": "posts/dfs-scraping/index.html#solving-the-authentication-issue",
    "href": "posts/dfs-scraping/index.html#solving-the-authentication-issue",
    "title": "Just scraping by",
    "section": "Solving the Authentication Issue",
    "text": "Solving the Authentication Issue\nTo get cookies from the browser, you need to simulate the browser. Simulating the browser means having your program open up an instance of your browser, and clicking on certain buttons and typing into text boxes the way you normally would. Luckily, Selenium allows you to do just that. The idea behind Selenium is that you can navigate a website by specifying which HTML elements to interact with. You can do this by providing tags, classes, ids, xpaths, or something else. In my case I opened up a browser automatically with Selenium and was looking at this page:\n\n\n\nDraftKings Login Page\n\n\nMy goal is to type my credentials into the Username and Password boxes. The first thing I need to do is tell Selenium which HTML element to interact with. I can find the element in the HTML document by right-clicking on it and pressing inspect. Now to find a description of this element, right-click on it in the HTML document and hover over the copy tab and click on any of the options. Clicking on selector in this case identifies the Username box as #login-username-input and the Password box as #login-password-input. Now I can tell Selenium to type my Username and Password into these elements, and finally click the Log In button. To get an idea of how it looks in Selenium, here is a snippet doing what I just described.\n\ndef login(driver):\n    ...\n\n    username = driver.find_element(By.ID, \"login-username-input\")\n    password = driver.find_element(By.ID, \"login-password-input\")\n    submit = driver.find_element(By.ID, \"login-submit\")\n\n    username.send_keys(os.getenv(\"DK_USERNAME\"))\n    password.send_keys(os.getenv(\"DK_PASSWORD\"))\n    submit.submit()\n\nFor the full implementation, check out this Python Script in my GitHub Repo.\nNow that we are logged in, we can retrieve the cookies from the browser and save them for later when we scrape contest data. We initially get the cookies in a dictionary, but depending on the tools you use later, you might want to store them differently. In my case, I needed the cookies in the Netscape cookies format because I was using the wget command. So, I wrote a utility function that converted the cookies to the desired format and wrote them to a file. Since Selenium is slow compared to other scraping tools that don’t automate the web broswer, we won’t be using Selenium again for speed purposes. But depending on your application, you could very well use Selenium for the rest of your webscraping project."
  },
  {
    "objectID": "posts/dfs-scraping/index.html#solving-the-speed-issue",
    "href": "posts/dfs-scraping/index.html#solving-the-speed-issue",
    "title": "Just scraping by",
    "section": "Solving the Speed Issue",
    "text": "Solving the Speed Issue\nAs I mentioned before, processing a large number of sequential web requests is not a viable long term solution. Trying to retrieve a simple page like www.google.com can take half a second, which done 3,000 times in a row would guarantee a runtime of at least 25 minutes. So, we turn to xargs to parallelize this process. The entire xargs command is pretty beefy, so it wouldn’t be of much help to look at directly, so I’ll explain part by part, and you can refer to the full commands for downloading standings and downloading payouts. First, we need to understand how wget works. Here are the relevant flags and what they do:\n\n\n\n\n\n\n\n\nFlag\nArgument\nPurpose\n\n\n\n\n–content-disposition\nnone\nSets the name of the file to what it was on the server\n\n\n–load-cookies\nnetscape cookies file\nLoad cookies from a file\n\n\n-o\nlog file\nLog the results of the command for debugging\n\n\n–input-file\nurls file\nScrape many sites with one wget call\n\n\n-U\nuser agent string\nThe user agent to use for the batch of requests\n\n\n\nSo within one wget call we are scraping as many sites as are in the input file. It’s good to batch the urls together because it saves time by only initializing (i.e. loading cookies, creating log file) once, but not too much in order to maximize the benefits of parallelization later with xargs. I put 50 urls in each file. Note that nothing so far is parallelized. Each of the urls in the input file will be retrieved sequentially.\nParallelization comes in when we call this wget command within an xargs command. This will look something like xargs ... wget ... where the dots are flags and arguments to the command that comes before it. The flags that allow the command to be run in parallel are discussed below:\n\n\n\nFlag\nArgument\nPurpose\n\n\n\n\n-L\nmax lines\nHow many lines to read at a time from input\n\n\n-P\nmax processes\nHow many processes to run at a time\n\n\n\nNotice that the -L flag implies that we’re reading from input. What we are reading from input is a list of input files to later pass into wget. In our case, our flags were -L 1 -P 10 implying that we read one input file at a time, and run 10 processes in parallel. In this context, a process is a separate invocation of wget. So the speed-up happens because we have 10 wget processes running at the same time, which should make our scraping take about one tenth of the time. While we could go even faster by increasing the number of processes, I didn’t want to be a nuisance and flood DraftKings more than I already am."
  },
  {
    "objectID": "posts/dfs-scraping/index.html#putting-it-all-together",
    "href": "posts/dfs-scraping/index.html#putting-it-all-together",
    "title": "Just scraping by",
    "section": "Putting it all Together",
    "text": "Putting it all Together\nNow that I had written and tested a successful scraper, I had to automate the process of running the script everyday. To do this I created a scheduled task to run a master script that included all the scraping commands on my computer everyday at 6am. I’m based on a Windows machine, so I used Task Scheduler, but there’s equivalent tools to do this for MacOS and Linux users as well.\nTypically, this is good enough. But, I was concerned that sometimes my computer might not run the script for whatever reason (i.e. the computer is dead, or I’m travelling and not connected to the internet at 6am). To make me feel better about this data collection, I wanted to make the data collection redundant. And I also didn’t want to setup some program on AWS that would inevitably bankrupt me. So, I turned to GitHub Actions.\nActions are a great way to automate running code. The general idea is that you can create a YAML file with instructions of what to do and GitHub will follow those exact instructions provided you place it in the .github/workflows/ directory. You can find my workflow here.\nHere are some highlights of the workflow that will help to understand the capabilities of Actions so you know what kinds of problems it is good at solving.\n\nRun the code once daily at 6am EST (10 am UTC)\non:\n    schedule:\n        - cron: \"0 10 * * *\"\nCron jobs are a popular way to schedule tasks on unix-based operating systems. You can review the syntax for cron scheduling to know how to achieve the schedule you want.\n\n\nCache the Python Environment so you can use the same one again tomorrow\n- name: Checkout repo\n    uses: actions/checkout@master\n\n- name: Set up Python\n    uses: actions/setup-python@v4\n    with:\n        python-version: \"3.11\"\n\n- name: Cache Python Environment\n    uses: actions/cache@v3\n    with:\n        path: ${{ env.pythonLocation }}\n        key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}\nEverytime you run an Action, you start off with a fresh virtual machine. If you want to use Python, you will have to download it fresh each time, which means you don’t have your packages that you used from last time. Downloading packages can take a really long time, so to avoid this delay, you can cache your python environments and packages so you can reuse what you have downloaded before.\n\n\nRun Python Scripts\n- name: Scrape Contests\n    run: python scripts/python/scrape_contests.py\nEach time you specify a run command in YAML, you get direct access to the command-line. You can use this as you would on your machine and directly run a python script. It’s as easy as that.\n\n\nDrawbacks\nThe only drawback I found with GitHub Actions so far is that I could not get selenium working properly. The issue had to do with the provided VM not having an external display, so the browser emulation could not fool DraftKings into thinking it was human on the website, and not a bot. This means that only some of the data is being scraped by GitHub each day. The silver-lining is that the data it scrapes can be used to fetch the missing parts on my machine locally if there’s ever a scenario that requires it."
  },
  {
    "objectID": "posts/dfs-scraping/index.html#conclusion",
    "href": "posts/dfs-scraping/index.html#conclusion",
    "title": "Just scraping by",
    "section": "Conclusion",
    "text": "Conclusion\nIf you’re new to webscraping, I hope you were able to learn a thing or two. One thing that you will learn if you haven’t already is that webscraping is always an arduous task, as no two websites are the same and there’s no one-size-fits-all solution. Webscraping is definitely an acquired taste, but it’s well worth its weight in data."
  },
  {
    "objectID": "posts/research-archives/index.html",
    "href": "posts/research-archives/index.html",
    "title": "Research Archives",
    "section": "",
    "text": "Papers\n\n\n\nPaper Name\nTopic\nRead?\nCitation\nNotes\n\n\n\n\nComputer Poker: A review\nPoker\nNo\n[1]\nEffective Hand Strength (EHS) Algorithm\n\n\nModifying Variability and Correlations in Winner-Take-All Contests\nGame Theory\nYes\n[2]\nHas applications in Riddler Game Theory Section\n\n\nOptimization Methods in Finance\nPortfolio Management\nParts\n[3]\npg. 143 Mean-Variance Optimization. Related to my quant stack exchange post\n\n\n\n\n\nWebsites\n\n\n\nTitle\nTopic\nRead?\nLink\nNotes\n\n\n\n\nDetermining Mean-Variance Efficient Portfolios Using Matrix Algebra\nPortfolio Management\nNo\n\n\n\n\ncvxpy Quadratic Programming\nOptimization\nYes\n\nMean-Variance Optimization\n\n\n\n\n\n\n\n\nReferences\n\n[1] J. Rubin, I. Watson, Computer poker: A review, Artificial Intelligence. 175 (2011) 958–987. https://doi.org/https://doi.org/10.1016/j.artint.2010.12.005.\n\n\n[2] A. Gaba, I. Tsetlin, R.L. Winkler, Modifying variability and correlations in winner-take-all contests, Operations Research. 52 (2004) 384–395. http://www.jstor.org/stable/30036590 (accessed February 10, 2023).\n\n\n[3] G. Cornuéjols, J. Peña, R. Tütüncü, Optimization methods in finance, Cambridge University Press, 2018. https://web.math.ku.dk/~rolf/CT_FinOpt.pdf."
  }
]